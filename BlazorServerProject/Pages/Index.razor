@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label for="User">
        User: <input type="text" name="" id="" class="form-control" @bind="userInput" />
    </label>
</div>

<div class="form-group">
    <label for="Message">
        Message: <input type="text" name="" id="" class="form-control" @bind="messageInput" />
    </label>
</div>

<button @onclick="Send" class="btn btn-primary my-4" disabled="@(IsConnected == false)">Send</button>

<hr>

<ul class="nav justifyocontent-center">
    @foreach(string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
                .WithAutomaticReconnect()
                .Build();
        hubConnection.On<string,string>("ReceiveMessage", (user,message) => 
            {
                var formattedMessage = $"{user}: {message}";
                messages.Add(formattedMessage);
                InvokeAsync(StateHasChanged);
            }
        );

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}